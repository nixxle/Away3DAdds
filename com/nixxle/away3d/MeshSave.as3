/*
	Simple class that converts a Mesh to ByteArray (and vica versa) to be saved on disk or sent over the internet. 
	Currently only does the geometry and it has only been tested on a single-geometry Mesh, so it is pretty limited. I agree. 
	
	Usage: 
	var ba:ByteArray = MeshSave.meshToByteArray(myMesh); 
	
	var mesh:Mesh = MeshSave.byteArrayToMesh(myByteArray)

	<3
*/

package com.nixxle.away3D
{
 	 import away3d.cameras.Camera3D;
	import away3d.containers.ObjectContainer3D;
	import away3d.containers.View3D;
	import away3d.core.base.Geometry;
	import away3d.core.base.SubGeometry;
	import away3d.entities.Mesh;
	
	import flash.geom.Matrix3D;
	import flash.geom.Utils3D;
	import flash.geom.Vector3D;
	import flash.utils.ByteArray;

	public class MeshSave
	{
		public function Utils3Dyteq()
		{
		}
	
	
		// Convert a Mesh to ByteArray	
		public static function meshToByteArray($mesh:Mesh):ByteArray{			
			var ba:ByteArray = new ByteArray();
			ba.writeObject(meshToObject($mesh));
			return ba; 
		}
	
		// Convert ByteArray Object (created by this class) back to Mesh
  		public static function byteArrayToMesh($ba:ByteArray):Mesh{
			return objectToMesh($ba.readObject())
		}

		public static function meshToObject($mesh:Mesh):Object{
			if(!$mesh.geometry) return {};
			var m:Object = 
				{ 	geometry : 
						{ subGeometries: [] }, 
					position: { 
						x: $mesh.position.x, 
						y: $mesh.position.y, 
						z: $mesh.position.z 
					} 
				};
			
			for each(var g:SubGeometry in $mesh.geometry.subGeometries){
				m.geometry.subGeometries.push(subGeometryToObject(g));
			}
			
			return m;
		}
		
		public static function subGeometryToObject($s:SubGeometry):Object{
			
			return { 
				vertices :  $s.vertexData ,
				uvs :  $s.UVData,
				secondaryUvs :  $s.secondaryUVData,
				vertexNormals :  $s.vertexNormalData,
				vertexTangents :  $s.vertexTangentData,
				indices :  $s.indexData
				//faceNormalsData : not included
				//faceWeights : not included 
				//faceTangents :  not included
			}
			
		}
		
		public static function objectToSubGeometry($obj:Object):SubGeometry{
			var s:SubGeometry = new SubGeometry(); 
			s.updateVertexData($obj.vertices); 
			s.updateIndexData($obj.indices);
			s.updateSecondaryUVData($obj.secondaryUvs);
			s.updateVertexNormalData($obj.vertexNormals);
			s.updateVertexTangentData($obj.vertexTangents);
			s.updateUVData($obj.uvs);
			return s;
		}
		
		
		public static function objectToMesh($obj:Object):Mesh{			
			var geo:Geometry = new Geometry();
			var subGeo:SubGeometry; 

			for each(var subObj:Object in $obj.geometry.subGeometries )
				geo.addSubGeometry(objectToSubGeometry(subObj));

			var mesh:Mesh = new Mesh(geo);

			if($obj.hasOwnProperty('position')) 
				mesh.position = new Vector3D($obj.position.x, $obj.position.y, $obj.position.z);

			return mesh;
		}
	}
}